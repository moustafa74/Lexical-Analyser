/* The following code was generated by JFlex 1.6.1 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/wwwmo/OneDrive/Desktop/project/task/src/task/spa.flex</tt>
 */
class Lexical {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\40\1\43\1\0\1\40\1\41\22\0\1\42\1\52\1\37"+
    "\2\0\1\52\1\61\1\36\1\45\1\45\1\57\1\55\1\45\1\56"+
    "\1\46\1\60\1\32\1\64\6\31\2\62\1\54\1\45\1\51\1\47"+
    "\1\50\1\53\1\45\1\63\1\65\1\63\1\66\1\67\1\66\5\33"+
    "\1\35\16\33\1\45\1\44\1\45\1\52\1\33\1\0\1\1\1\2"+
    "\1\6\1\20\1\7\1\21\1\24\1\15\1\16\1\33\1\13\1\11"+
    "\1\22\1\12\1\10\1\25\1\33\1\5\1\3\1\4\1\17\1\26"+
    "\1\27\1\23\1\14\1\30\1\45\1\34\1\45\1\53\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\21\2\1\3\1\1\1\4\2\1\2\5"+
    "\2\6\11\4\31\2\1\7\2\2\1\7\12\2\1\0"+
    "\1\3\2\10\2\0\1\11\4\0\1\12\3\0\1\13"+
    "\31\2\1\7\16\2\1\0\1\14\1\15\1\11\1\16"+
    "\2\0\1\12\3\0\10\2\1\17\6\2\1\20\11\2"+
    "\1\10\1\14\1\15\3\0\1\21\6\2\1\7\7\2"+
    "\1\7\2\2\3\0\12\2\1\0\1\22\1\0\14\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\70\0\u0540\0\70\0\u0578\0\u05b0\0\u05e8\0\u0620\0\70"+
    "\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0"+
    "\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0"+
    "\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u01f8\0\u0ce8"+
    "\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8"+
    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\70\0\70\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8"+
    "\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378"+
    "\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538"+
    "\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8"+
    "\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\70"+
    "\0\70\0\u1c38\0\u1c70\0\70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50"+
    "\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u01f8"+
    "\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u01f8\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220"+
    "\0\u2258\0\70\0\70\0\u2290\0\u22c8\0\u2300\0\70\0\u2338"+
    "\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u15e0\0\u2488\0\u24c0"+
    "\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680"+
    "\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840"+
    "\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u26f0\0\u29c8"+
    "\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88"+
    "\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\3\12\1\15\1\12\1\16\1\17"+
    "\2\12\1\20\1\21\1\22\1\23\1\12\1\24\1\25"+
    "\1\12\1\26\1\12\1\27\1\30\1\31\1\32\2\31"+
    "\1\2\1\33\1\34\1\35\1\36\1\37\1\35\1\40"+
    "\1\41\1\42\1\43\1\35\1\44\1\45\1\24\1\12"+
    "\1\24\3\12\71\0\1\12\1\46\1\47\30\12\1\0"+
    "\1\12\24\0\6\12\1\0\4\12\1\50\2\12\1\51"+
    "\3\12\1\52\17\12\1\0\1\12\24\0\6\12\1\0"+
    "\3\12\1\53\7\12\1\54\1\55\1\12\1\56\7\12"+
    "\1\57\4\12\1\0\1\12\24\0\6\12\1\0\4\12"+
    "\1\60\7\12\1\61\16\12\1\0\1\12\24\0\6\12"+
    "\1\0\6\12\1\62\24\12\1\0\1\12\24\0\6\12"+
    "\1\0\1\63\6\12\1\64\1\65\3\12\1\66\16\12"+
    "\1\0\1\12\24\0\6\12\1\0\10\12\1\67\1\70"+
    "\10\12\1\71\10\12\1\0\1\12\24\0\6\12\1\0"+
    "\33\12\1\0\1\12\24\0\6\12\1\0\7\12\1\72"+
    "\23\12\1\0\1\12\24\0\6\12\1\0\1\73\5\12"+
    "\1\74\7\12\1\75\14\12\1\0\1\12\24\0\6\12"+
    "\1\0\11\12\1\76\6\12\1\77\1\100\11\12\1\0"+
    "\1\12\24\0\6\12\1\0\6\12\1\101\1\102\23\12"+
    "\1\0\1\12\24\0\6\12\1\0\1\103\6\12\1\104"+
    "\1\105\4\12\1\106\15\12\1\0\1\12\24\0\6\12"+
    "\1\0\7\12\1\107\23\12\1\0\1\12\24\0\6\12"+
    "\1\0\1\110\3\12\1\111\11\12\1\112\14\12\1\0"+
    "\1\12\24\0\6\12\1\0\7\12\1\113\23\12\1\0"+
    "\1\12\24\0\6\12\1\0\14\12\1\114\16\12\1\0"+
    "\1\12\24\0\6\12\7\0\1\115\1\0\1\116\6\0"+
    "\2\117\7\0\2\24\1\0\2\116\4\0\1\116\3\0"+
    "\1\120\13\0\1\24\1\0\1\24\1\0\1\117\1\115"+
    "\2\0\1\121\4\0\1\115\10\0\2\117\1\0\1\122"+
    "\5\0\2\123\13\0\1\120\13\0\1\124\1\0\1\123"+
    "\1\121\1\117\1\115\34\0\1\40\12\0\1\40\20\0"+
    "\36\125\1\0\5\125\1\126\23\125\37\127\1\130\3\127"+
    "\1\0\1\131\23\127\43\0\1\31\55\0\2\120\13\0"+
    "\1\132\13\0\1\120\1\0\1\120\52\0\1\40\67\0"+
    "\2\40\66\0\1\40\1\0\1\40\72\0\1\33\62\0"+
    "\1\40\5\0\1\40\61\0\2\40\5\0\1\40\60\0"+
    "\1\40\7\0\1\133\1\134\56\0\1\40\11\0\1\40"+
    "\7\0\2\12\1\135\30\12\1\0\1\12\24\0\6\12"+
    "\1\0\2\12\1\136\30\12\1\0\1\12\24\0\6\12"+
    "\1\0\6\12\1\137\24\12\1\0\1\12\24\0\6\12"+
    "\1\0\7\12\1\140\23\12\1\0\1\12\24\0\6\12"+
    "\1\0\3\12\1\141\27\12\1\0\1\12\24\0\6\12"+
    "\1\0\1\142\3\12\1\143\26\12\1\0\1\12\24\0"+
    "\6\12\1\0\11\12\1\144\21\12\1\0\1\12\24\0"+
    "\6\12\1\0\7\12\1\145\23\12\1\0\1\12\24\0"+
    "\6\12\1\0\24\12\1\146\6\12\1\0\1\12\24\0"+
    "\6\12\1\0\15\12\1\147\15\12\1\0\1\12\24\0"+
    "\6\12\1\0\1\150\12\12\1\77\2\12\1\151\14\12"+
    "\1\0\1\12\24\0\6\12\1\0\4\12\1\152\10\12"+
    "\1\153\15\12\1\0\1\12\24\0\6\12\1\0\3\12"+
    "\1\154\27\12\1\0\1\12\24\0\6\12\1\0\2\12"+
    "\1\141\1\155\27\12\1\0\1\12\24\0\6\12\1\0"+
    "\11\12\1\156\21\12\1\0\1\12\24\0\6\12\1\0"+
    "\1\157\32\12\1\0\1\12\24\0\6\12\1\0\1\104"+
    "\32\12\1\0\1\12\24\0\6\12\1\0\2\12\1\141"+
    "\30\12\1\0\1\12\24\0\6\12\1\0\16\12\1\160"+
    "\14\12\1\0\1\12\24\0\6\12\1\0\3\12\1\161"+
    "\27\12\1\0\1\12\24\0\6\12\1\0\11\12\1\162"+
    "\21\12\1\0\1\12\24\0\6\12\1\0\3\12\1\163"+
    "\27\12\1\0\1\12\24\0\6\12\1\0\26\12\1\77"+
    "\4\12\1\0\1\12\24\0\6\12\1\0\10\12\1\164"+
    "\22\12\1\0\1\12\24\0\6\12\1\0\2\12\1\165"+
    "\1\166\27\12\1\0\1\12\24\0\6\12\1\0\24\12"+
    "\1\167\6\12\1\0\1\12\24\0\6\12\1\0\20\12"+
    "\1\170\12\12\1\0\1\12\24\0\6\12\1\0\16\12"+
    "\1\171\14\12\1\0\1\12\24\0\6\12\1\0\10\12"+
    "\1\172\22\12\1\0\1\12\24\0\6\12\1\0\4\12"+
    "\1\77\26\12\1\0\1\12\24\0\6\12\1\0\7\12"+
    "\1\173\23\12\1\0\1\12\24\0\6\12\1\0\11\12"+
    "\1\174\21\12\1\0\1\12\24\0\6\12\1\0\3\12"+
    "\1\175\27\12\1\0\1\12\24\0\6\12\1\0\5\12"+
    "\1\176\25\12\1\0\1\12\24\0\6\12\1\0\7\12"+
    "\1\177\5\12\1\200\15\12\1\0\1\12\24\0\6\12"+
    "\1\0\1\12\1\201\31\12\1\0\1\12\24\0\6\12"+
    "\1\0\10\12\1\202\4\12\1\203\15\12\1\0\1\12"+
    "\24\0\6\12\1\0\15\12\1\204\15\12\1\0\1\12"+
    "\24\0\6\12\55\0\2\205\20\0\1\115\10\0\2\117"+
    "\7\0\2\120\27\0\1\120\1\0\1\120\1\0\1\117"+
    "\1\115\32\0\1\206\31\0\1\206\4\0\2\207\3\0"+
    "\2\207\10\0\2\207\7\0\2\207\27\0\6\207\7\0"+
    "\1\115\1\0\1\210\6\0\2\117\7\0\2\123\1\0"+
    "\2\210\4\0\1\210\3\0\1\120\13\0\1\124\1\0"+
    "\1\123\1\0\1\117\1\115\7\0\1\115\10\0\2\117"+
    "\7\0\2\124\13\0\1\120\13\0\1\124\1\0\1\124"+
    "\1\0\1\117\1\115\36\0\1\211\33\0\1\125\1\0"+
    "\2\125\4\0\1\125\4\0\1\212\1\0\1\125\7\0"+
    "\2\213\3\0\2\125\4\0\1\125\15\0\1\213\1\0"+
    "\1\213\3\0\37\127\1\214\3\127\1\0\1\131\23\127"+
    "\37\0\1\215\32\0\1\127\1\0\2\127\4\0\1\127"+
    "\4\0\1\216\1\0\1\127\7\0\2\127\3\0\2\127"+
    "\4\0\1\127\15\0\1\127\1\0\1\127\51\0\1\33"+
    "\21\0\57\133\1\217\10\133\41\134\1\0\1\134\1\0"+
    "\24\134\1\0\3\12\1\220\27\12\1\0\1\12\24\0"+
    "\6\12\1\0\6\12\1\145\24\12\1\0\1\12\24\0"+
    "\6\12\1\0\1\221\32\12\1\0\1\12\24\0\6\12"+
    "\1\0\10\12\1\222\22\12\1\0\1\12\24\0\6\12"+
    "\1\0\6\12\1\77\24\12\1\0\1\12\24\0\6\12"+
    "\1\0\3\12\1\223\27\12\1\0\1\12\24\0\6\12"+
    "\1\0\15\12\1\224\15\12\1\0\1\12\24\0\6\12"+
    "\1\0\5\12\1\225\25\12\1\0\1\12\24\0\6\12"+
    "\1\0\4\12\1\226\26\12\1\0\1\12\24\0\6\12"+
    "\1\0\6\12\1\104\24\12\1\0\1\12\24\0\6\12"+
    "\1\0\3\12\1\155\27\12\1\0\1\12\24\0\6\12"+
    "\1\0\11\12\1\227\21\12\1\0\1\12\24\0\6\12"+
    "\1\0\6\12\1\230\24\12\1\0\1\12\24\0\6\12"+
    "\1\0\7\12\1\231\23\12\1\0\1\12\24\0\6\12"+
    "\1\0\2\12\1\77\30\12\1\0\1\12\24\0\6\12"+
    "\1\0\16\12\1\232\14\12\1\0\1\12\24\0\6\12"+
    "\1\0\5\12\1\233\25\12\1\0\1\12\24\0\6\12"+
    "\1\0\2\12\1\226\1\234\27\12\1\0\1\12\24\0"+
    "\6\12\1\0\2\12\1\153\30\12\1\0\1\12\24\0"+
    "\6\12\1\0\21\12\1\77\11\12\1\0\1\12\24\0"+
    "\6\12\1\0\6\12\1\235\24\12\1\0\1\12\24\0"+
    "\6\12\1\0\23\12\1\77\7\12\1\0\1\12\24\0"+
    "\6\12\1\0\15\12\1\236\15\12\1\0\1\12\24\0"+
    "\6\12\1\0\10\12\1\237\22\12\1\0\1\12\24\0"+
    "\6\12\1\0\3\12\1\240\27\12\1\0\1\12\24\0"+
    "\6\12\1\0\6\12\1\241\24\12\1\0\1\12\24\0"+
    "\6\12\1\0\7\12\1\145\1\242\22\12\1\0\1\12"+
    "\24\0\6\12\1\0\1\243\32\12\1\0\1\12\24\0"+
    "\6\12\1\0\1\12\1\204\31\12\1\0\1\12\24\0"+
    "\6\12\1\0\2\12\1\151\30\12\1\0\1\12\24\0"+
    "\6\12\1\0\1\226\32\12\1\0\1\12\24\0\6\12"+
    "\1\0\1\244\32\12\1\0\1\12\24\0\6\12\1\0"+
    "\7\12\1\77\23\12\1\0\1\12\24\0\6\12\1\0"+
    "\12\12\1\245\20\12\1\0\1\12\24\0\6\12\1\0"+
    "\3\12\1\246\27\12\1\0\1\12\24\0\6\12\1\0"+
    "\25\12\1\247\5\12\1\0\1\12\24\0\6\12\1\0"+
    "\10\12\1\223\22\12\1\0\1\12\24\0\6\12\1\0"+
    "\1\250\32\12\1\0\1\12\24\0\6\12\1\0\17\12"+
    "\1\77\13\12\1\0\1\12\24\0\6\12\1\0\10\12"+
    "\1\141\22\12\1\0\1\12\24\0\6\12\31\0\2\251"+
    "\27\0\1\251\1\0\1\251\14\0\1\252\20\0\1\206"+
    "\1\0\2\252\4\0\1\252\21\0\1\206\4\0\2\207"+
    "\3\0\2\207\1\0\1\253\6\0\2\207\7\0\2\207"+
    "\1\0\2\253\4\0\1\253\17\0\6\207\1\0\2\254"+
    "\3\0\2\254\10\0\2\254\7\0\2\254\27\0\6\254"+
    "\31\0\2\213\3\0\1\211\23\0\1\213\1\0\1\213"+
    "\3\0\37\215\1\255\4\215\1\0\23\215\1\0\2\256"+
    "\3\0\2\256\10\0\2\256\7\0\2\256\27\0\6\256"+
    "\57\133\1\217\1\257\7\133\1\0\4\12\1\260\26\12"+
    "\1\0\1\12\24\0\6\12\1\0\12\12\1\77\20\12"+
    "\1\0\1\12\24\0\6\12\1\0\6\12\1\261\24\12"+
    "\1\0\1\12\24\0\6\12\1\0\15\12\1\262\15\12"+
    "\1\0\1\12\24\0\6\12\1\0\5\12\1\263\25\12"+
    "\1\0\1\12\24\0\6\12\1\0\14\12\1\264\16\12"+
    "\1\0\1\12\24\0\6\12\1\0\3\12\1\77\27\12"+
    "\1\0\1\12\24\0\6\12\1\0\2\12\1\265\30\12"+
    "\1\0\1\12\24\0\6\12\1\0\26\12\1\266\4\12"+
    "\1\0\1\12\24\0\6\12\1\0\4\12\1\267\26\12"+
    "\1\0\1\12\24\0\6\12\1\0\14\12\1\77\16\12"+
    "\1\0\1\12\24\0\6\12\1\0\15\12\1\270\15\12"+
    "\1\0\1\12\24\0\6\12\1\0\11\12\1\271\21\12"+
    "\1\0\1\12\24\0\6\12\1\0\25\12\1\141\5\12"+
    "\1\0\1\12\24\0\6\12\1\0\1\272\32\12\1\0"+
    "\1\12\24\0\6\12\1\0\4\12\1\273\26\12\1\0"+
    "\1\12\24\0\6\12\1\0\6\12\1\274\24\12\1\0"+
    "\1\12\24\0\6\12\1\0\16\12\1\275\14\12\1\0"+
    "\1\12\24\0\6\12\1\0\10\12\1\276\22\12\1\0"+
    "\1\12\24\0\6\12\1\0\1\277\32\12\1\0\1\12"+
    "\24\0\6\12\1\0\6\12\1\300\24\12\1\0\1\12"+
    "\24\0\6\12\1\0\1\52\32\12\1\0\1\12\24\0"+
    "\6\12\1\0\3\12\1\114\27\12\1\0\1\12\24\0"+
    "\6\12\20\0\2\117\7\0\2\251\27\0\1\251\1\0"+
    "\1\251\1\0\1\117\2\0\2\301\3\0\2\301\10\0"+
    "\2\301\7\0\2\301\27\0\6\301\37\215\1\302\4\215"+
    "\1\0\23\215\1\0\2\303\3\0\2\303\10\0\2\303"+
    "\7\0\2\303\27\0\6\303\1\0\1\304\32\12\1\0"+
    "\1\12\24\0\6\12\1\0\1\267\32\12\1\0\1\12"+
    "\24\0\6\12\1\0\5\12\1\77\25\12\1\0\1\12"+
    "\24\0\6\12\1\0\3\12\1\305\27\12\1\0\1\12"+
    "\24\0\6\12\1\0\4\12\1\306\26\12\1\0\1\12"+
    "\24\0\6\12\1\0\15\12\1\307\15\12\1\0\1\12"+
    "\24\0\6\12\1\0\11\12\1\77\21\12\1\0\1\12"+
    "\24\0\6\12\1\0\11\12\1\310\21\12\1\0\1\12"+
    "\24\0\6\12\1\0\17\12\1\153\13\12\1\0\1\12"+
    "\24\0\6\12\1\0\11\12\1\311\21\12\1\0\1\12"+
    "\24\0\6\12\1\0\20\12\1\312\12\12\1\0\1\12"+
    "\24\0\6\12\1\0\21\12\1\313\11\12\1\0\1\12"+
    "\24\0\6\12\1\0\10\12\1\226\22\12\1\0\1\12"+
    "\24\0\6\12\1\0\10\12\1\314\22\12\1\0\1\12"+
    "\24\0\6\12\1\0\23\12\1\141\7\12\1\0\1\12"+
    "\24\0\6\12\1\0\5\12\1\315\25\12\1\0\1\12"+
    "\24\0\6\12\1\0\2\316\3\0\2\316\10\0\2\316"+
    "\7\0\2\316\27\0\6\316\37\215\1\317\4\215\1\0"+
    "\23\215\1\0\2\320\3\0\2\320\10\0\2\320\7\0"+
    "\2\320\27\0\6\320\1\0\5\12\1\226\25\12\1\0"+
    "\1\12\24\0\6\12\1\0\20\12\1\321\12\12\1\0"+
    "\1\12\24\0\6\12\1\0\7\12\1\322\23\12\1\0"+
    "\1\12\24\0\6\12\1\0\6\12\1\323\24\12\1\0"+
    "\1\12\24\0\6\12\1\0\16\12\1\141\14\12\1\0"+
    "\1\12\24\0\6\12\1\0\5\12\1\324\25\12\1\0"+
    "\1\12\24\0\6\12\1\0\1\325\32\12\1\0\1\12"+
    "\24\0\6\12\1\0\6\12\1\326\24\12\1\0\1\12"+
    "\24\0\6\12\1\0\13\12\1\77\17\12\1\0\1\12"+
    "\24\0\6\12\1\0\3\12\1\327\27\12\1\0\1\12"+
    "\24\0\6\12\1\0\2\125\3\0\2\125\10\0\2\125"+
    "\7\0\2\125\27\0\6\125\1\0\2\127\3\0\2\127"+
    "\10\0\2\127\7\0\2\127\27\0\6\127\1\0\24\12"+
    "\1\77\6\12\1\0\1\12\24\0\6\12\1\0\11\12"+
    "\1\330\21\12\1\0\1\12\24\0\6\12\1\0\11\12"+
    "\1\226\21\12\1\0\1\12\24\0\6\12\1\0\6\12"+
    "\1\331\24\12\1\0\1\12\24\0\6\12\1\0\5\12"+
    "\1\141\25\12\1\0\1\12\24\0\6\12\1\0\11\12"+
    "\1\332\21\12\1\0\1\12\24\0\6\12\1\0\6\12"+
    "\1\203\24\12\1\0\1\12\24\0\6\12\1\0\15\12"+
    "\1\333\15\12\1\0\1\12\24\0\6\12\1\0\7\12"+
    "\1\334\23\12\1\0\1\12\24\0\6\12\1\0\3\12"+
    "\1\153\27\12\1\0\1\12\24\0\6\12\1\0\27\12"+
    "\1\327\3\12\1\0\1\12\24\0\6\12\1\0\20\12"+
    "\1\77\12\12\1\0\1\12\24\0\6\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11424];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\26\1\1\11\1\1\1\11\4\1\1\11"+
    "\54\1\1\0\2\11\1\1\2\0\1\1\4\0\1\1"+
    "\3\0\51\1\1\0\2\1\2\11\2\0\1\11\3\0"+
    "\32\1\2\11\3\0\1\11\21\1\3\0\12\1\1\0"+
    "\1\1\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexical(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            }
          case 19: break;
          case 2: 
            { System.out.printf(" \n (%s)=============> Identifier \n" ,yytext());
            }
          case 20: break;
          case 3: 
            { System.out.printf(" \n(%s)=============> DecimalIntegerLiteral \n" ,yytext());
            }
          case 21: break;
          case 4: 
            { System.out.printf(" \n(%s) =============>Operators \n" ,yytext());
            }
          case 22: break;
          case 5: 
            { System.out.printf(" \n =============>space \n" ,yytext());
            }
          case 23: break;
          case 6: 
            { System.out.printf(" \n(%s)=============> Separators \n" ,yytext());
            }
          case 24: break;
          case 7: 
            { System.out.printf(" \n(%s)=============> keywords \n" ,yytext());
            }
          case 25: break;
          case 8: 
            { System.out.printf(" \n(%s)=============> FloatingPointLiteral \n" ,yytext());
            }
          case 26: break;
          case 9: 
            { System.out.printf(" \n(%s)=============> OctalIntegerLiteral \n" ,yytext());
            }
          case 27: break;
          case 10: 
            { System.out.printf(" \n(%s) =============>StringLiteral \n" ,yytext());
            }
          case 28: break;
          case 11: 
            { System.out.printf(" \n(%s)=============> Comment \n" ,yytext());
            }
          case 29: break;
          case 12: 
            { System.out.printf(" \n(%s)=============> BinaryIntegerLiteral \n" ,yytext());
            }
          case 30: break;
          case 13: 
            { System.out.printf(" \n(%s) =============>HexIntegerLiteral \n" ,yytext());
            }
          case 31: break;
          case 14: 
            { System.out.printf(" \n (%s)=============> CharacterLiteral \n" ,yytext());
            }
          case 32: break;
          case 15: 
            { System.out.printf(" \n (%s) =============>BooleanLiteral \n" ,yytext());
            }
          case 33: break;
          case 16: 
            { System.out.printf("\n (%s) =============>NullLiteral \n" ,yytext());
            }
          case 34: break;
          case 17: 
            { System.out.printf(" \n(%s) =============>multicomm \n" ,yytext());
            }
          case 35: break;
          case 18: 
            { System.out.printf("\n (%s)=============> TextBlock \n" ,yytext());
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexical [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexical scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexical(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
